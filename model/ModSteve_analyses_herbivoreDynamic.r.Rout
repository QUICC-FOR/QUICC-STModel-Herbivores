
R version 3.0.1 (2013-05-16) -- "Good Sport"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R est un logiciel libre livré sans AUCUNE GARANTIE.
Vous pouvez le redistribuer sous certaines conditions.
Tapez 'license()' ou 'licence()' pour plus de détails.

R est un projet collaboratif avec de nombreux contributeurs.
Tapez 'contributors()' pour plus d'information et
'citation()' pour la façon de le citer dans les publications.

Tapez 'demo()' pour des démonstrations, 'help()' pour l'aide
en ligne ou 'help.start()' pour obtenir l'aide au format HTML.
Tapez 'q()' pour quitter R.

[Sauvegarde de la session précédente restaurée]

> rm(list=ls())
> #------------------------------------------
> # coexistence
> #------------------------------------------
> library(pracma) #lambertWp
Message d'avis :
le package ‘pracma’ a été compilé avec la version R 3.0.2 
> library(rootSolve)

Attachement du package : ‘rootSolve’

L'objet suivant est masqué from ‘package:pracma’:

    gradient, hessian

> 
> # params 
> #--------
> k0=0.8; 
> u = 90000; v = 40000;  w=25000; x= 30000
> 
> # moose
> pa = 5.84
> za = 1
> ca = 0.7
> ma0 = 0.05
> mas = 0.1
> taua = 17
> mua = 3979
> nua = 796
> phia = 0.8
> ra = 5
> 
> #deer
> pv = 5.84
> zv = 1
> cv = 0.7
> mv = 10
> tauv = 18
> muv = 790
> nuv = 158
> phiv = 0.8
> rv = 5
> 
> 
> 
> # carrying capacities 
> #--------
> 
> Ikv = (1/cv)*(mv + pv + lambertWp(zv*exp(-zv*(mv+pv)))/zv)
> 
> 
> # functions
> #----------
> 
> k_fct = function(Ha, Hv)
+ {
+ k = exp(-log(1/k0)*Hv/Ha)
+ return(k)
+ }
> 
> Ia_fct = function(Ha, Hv, R, T, B, M)
+ {
+ 
+     k = k_fct(Ha, Hv)
+     
+ if(Ha>0)
+     {
+     ma = (ma0 - mas)*B + mas
+     F = k*u*R/Ha
+     G = k*(v*T + w*B + x*M)/Ha
+     Ia1 = taua*F/(mua + F)
+     Ia2 = (taua*G/(nua + G) )* (phia*(exp(ma+pa)-1)*exp(-pa-ma))/( (exp(ma+pa)-2)*exp(-pa-ma) + exp(ra*( taua*F/(mua + F) -pa-ma ) ) )
+     }else
+     {
+     Ia1 = Ia2 = 0
+     print("Ha is null")
+     }
+ 
+ return(c(Ia1=Ia1, Ia2=Ia2))
+ }
> 
> 
> Iv_fct = function(Ha, Hv, R, T, B, M)
+ {
+ 
+     k = k_fct(Ha, Hv)
+    
+ if(Hv>0)
+ {
+     F = u*(1-k)*R/Hv
+     G = (1-k) * (v*T + w*B + x*M)/Hv
+     Iv1 = tauv*F/(muv + F)
+     Iv2 = (tauv*G/(nuv + G) )* (phiv*(exp(mv+pv)-1)*exp(-pv-mv))/( (exp(mv+pv)-2)*exp(-pv-mv) + exp(rv*( tauv*F/(muv + F) -pv-mv ) ) )
+     }else
+ {
+ Iv1 = Iv2 = 0
+ print("Hv is null")
+ }
+ 
+     return(c(Iv1=Iv1, Iv2=Iv2))
+  
+ }
> 
> # to solve Ha for Ia - Ika = 0
> 
> Ia_Ika =function(Ha, Hv, R, T, B, M)
+ {
+ ma = (ma0 - mas)*B + mas
+ Ika = (1/ca)*(ma + pa + lambertWp(za*exp(-za*(ma+pa)))/za)
+ Ia = Ia_fct(Ha, Hv, R, T, B, M)
+ 
+ res = Ia["Ia1"]+Ia["Ia2"]-Ika
+ return(res)
+ }
> 
> # to solve Ha for Iv - Ikv =0
> 
> Iv_Ikv =function(Ha, Hv, R, T, B, M, Ikv)
+ {
+ Iv = Iv_fct(Ha, Hv, R, T, B, M)
+ res = Iv["Iv1"]+Iv["Iv2"]-Ikv
+ return(res)
+ }
> 
> # find Hv back pour Ha=0
> Iv_Ikv2 =function(Hv, Ha, R, T, B, M, Ikv)
+ {
+ Iv = Iv_fct(Ha, Hv, R, T, B, M)
+ res = Iv["Iv1"]+Iv["Iv2"]-Ikv
+ return(res)
+ }
> 
> 
> 
> # RTBM space
> #-------------
> 
> xx= seq(0,1,0.1)
> RTB = expand.grid(list(R=xx, T=xx, B=xx), KEEP.OUT.ATTRS = FALSE)
> 
> RTB= cbind(RTB, sum= apply(RTB, 1, sum))
> 
> RTB = RTB[which(RTB[,4]<=1),]
> 
> RTBM = RTB[,1:3]
> RTBM$M = 1- apply(RTBM, 1, sum)
> 
> 
> # find equilibrium functions
> #-------------
> 
> # solve the system Ia-Ika = 0; Iv-Ikv=0
> # give Hv value
> eq_fct = function(Hv, RTBM)
+ {
+ 
+ #RTBM = c(.5, .2, 0.2, 0.1) ; Hv=0; # debug
+ R = as.numeric(RTBM[1])
+ T = as.numeric(RTBM[2])
+ B = as.numeric(RTBM[3])
+ M = as.numeric(RTBM[4])
+ 
+ # 1 # find Ha for which Ia - Ika = 0
+ # cherche solution positive sinon 0 est une solution quelque-soit Hv
+ hamin = as.numeric(Ia_Ika(0.0001, Hv=Hv, R=R, T=T, B=B, M=M))
+ hamax = as.numeric(Ia_Ika(10000, Hv=Hv, R=R, T=T, B=B, M=M))
+ if(hamin*hamax<0) # if it is possible to cross the zero line
+ {
+ Ha_eq1 = uniroot(Ia_Ika, Hv=Hv, R=R, T=T, B=B, M=M, interval=c(0.0001, 10000), f.lower = hamin, f.upper = hamax, tol = 0.001)$root
+ } else Ha_eq1 = 0;
+ 
+ if(Hv>0)
+ {
+ # 2 # find Ha for which Iv - Ikv = 0
+ # cherche solution positive sinon 0 est une solution quelque-soit Hv
+ hvmin = as.numeric(Iv_Ikv(0.0001, Hv=Hv, R=R, T=T, B=B, M=M, Ikv=Ikv))
+ hvmax = as.numeric(Iv_Ikv(10000, Hv=Hv, R=R, T=T, B=B, M=M, Ikv=Ikv))
+ if(hvmin*hvmax<0) # if it is possible to cross the zero line
+ {
+ Ha_eq2 = uniroot(Iv_Ikv, Hv=Hv, R=R, T=T, B=B, M=M, Ikv=Ikv, interval=c(0.0001, 10000), f.lower = hvmin, f.upper = hvmax, tol = 0.001)$root
+ } else Ha_eq2 = 0;
+ } else Ha_eq2 = Ha_eq1;
+ 
+ # res should be 0 to solve both Ika-Ia = 0 and Ikv-Iv = 0
+ res = Ha_eq1 - Ha_eq2
+ 
+ return(res)
+ }
> 
> ### solve equilibrium main function
> eq_H = function(RTBM)
+ {
+ #print(RTBM)
+ #RTBM = c(.2, .3, 0.1, 0.4)  # debug
+ R = as.numeric(RTBM[1])
+ T = as.numeric(RTBM[2])
+ B = as.numeric(RTBM[3])
+ M = as.numeric(RTBM[4])
+ 
+ # first tries to test if there is a interval including zero (a solution)
+ Hvx = seq(0.0001, 10000, 10)
+ res = unlist(lapply(Hvx, eq_fct, RTBM=as.numeric(RTBM[1:4])))
+ #plot(Hax, res, type="b")
+ #abline(h=0)
+ 
+ 
+ if(sum(is.na(res))!=length(res)) # check if there is no special case problems
+ {
+ #print(RTBM)
+ 
+ if(sum(res==0)>1) 
+ # res == 0 pour infinite Hv>0, which means Ha=0 is a solution
+ {
+ Ha_eq= 0
+ 
+ # find Hv back pour Ha_eq=0
+ 
+ hvmin = as.numeric(Iv_Ikv(0.0001, Ha=Ha_eq, R=R, T=T, B=B, M=M, Ikv=Ikv))
+ hvmax = as.numeric(Iv_Ikv(10000, Ha=Ha_eq, R=R, T=T, B=B, M=M, Ikv=Ikv))
+ if(hvmin*hvmax<0) # if it is possible to cross the zero line
+ {
+ Hv_eq = uniroot(Iv_Ikv, Ha=Ha_eq, R=R, T=T, B=B, M=M, Ikv=Ikv, interval=c(0.0001, 10000), f.lower = hvmin, f.upper = hvmax, tol = 0.001)$root
+ } else Hv_eq = 0;
+ 
+ }else{
+ 
+ if(max(res, na.rm=TRUE)>0 & min(res, na.rm=TRUE)<0 ) 
+ # check if there is a unique solution
+ {
+     imin = Hvx[which.min(res)]
+     imax = Hvx[which.max(res)]
+     hvmin = eq_fct(imin, as.numeric(RTBM[1:4]))
+     hvmax = eq_fct(imax, as.numeric(RTBM[1:4]))
+     if(hvmin*hvmax<0) 
+     {
+     Hv_eq = uniroot(eq_fct, RTBM=as.numeric(RTBM[1:4]), interval=c(imin, imax))$root
+     } else {
+     if(eq_fct(0, RTBM=as.numeric(RTBM[1:4]))==0) {
+     Hv_eq = 0
+     }else Hv_eq=NA
+     }
+ }else{Hv_eq = 0}
+ # find Ha back pour Hv_eq
+ if(!is.na(Hv_eq))
+ {
+ 
+ hamin = as.numeric(Ia_Ika(0.0001, Hv=Hv_eq, R=R, T=T, B=B, M=M))
+ hamax = as.numeric(Ia_Ika(10000, Hv=Hv_eq, R=R, T=T, B=B, M=M))
+ if(hamin*hamax<0) # if it is possible to cross the zero line
+ {
+ Ha_eq = uniroot(Ia_Ika, Hv=Hv_eq, R=R, T=T, B=B, M=M, interval=c(0.0001, 10000), f.lower = hamin, f.upper = hamax, tol = 0.001)$root
+ } else Ha_eq = 0;
+ 
+ }else {
+ Ha_eq = NA
+ }
+ 
+ 
+ }
+ 
+ }else {
+ # res = NA pour tout Hv : no equilibrium
+ Ha_eq= Hv_eq = NA;
+ }
+ 
+ return(c(Ha_eq, Hv_eq))
+ }
> 
> ### apply function to find Hb that solve the equation
> 
> testIndex = sample(1:nrow(RTBM), 80)
> 
> Hstars = t(apply(RTBM[testIndex,], 1,  eq_H)); colnames(Hstars) = c("Ha", "Hv");
> Hstars = cbind(RTBM[testIndex,], Hstars)
> 
> 
> # plot
> #---------
> summary(Hstars)
       R               T                B                M                Ha   
 Min.   :0.000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0  
 1st Qu.:0.075   1st Qu.:0.1000   1st Qu.:0.1000   1st Qu.:0.0000   1st Qu.:0  
 Median :0.200   Median :0.1500   Median :0.2000   Median :0.2000   Median :0  
 Mean   :0.245   Mean   :0.2225   Mean   :0.3013   Mean   :0.2313   Mean   :0  
 3rd Qu.:0.400   3rd Qu.:0.4000   3rd Qu.:0.5000   3rd Qu.:0.4000   3rd Qu.:0  
 Max.   :0.900   Max.   :0.7000   Max.   :0.9000   Max.   :0.9000   Max.   :0  
       Hv   
 Min.   :0  
 1st Qu.:0  
 Median :0  
 Mean   :0  
 3rd Qu.:0  
 Max.   :0  
> 
> #par(mfrow = c(2, 2))
> #
> #hist(Hstars$Ha, main="Moose")
> #hist(Hstars$Hv, main="Deer")
> 
> tab = Hstars[order(Hstars$B),]
> 
> meanHa = lapply(split(tab$Ha, tab$B), mean)
> meanHv = lapply(split(tab$Hv, tab$B), mean)
> Bax = as.numeric(as.character(names(meanHa)))
> 
> 
> pdf("../graphs/herbivore_coexistence.pdf")
> 
> plot(Bax , meanHa, main="Herbivores biomasses at equilibrium", xlab = "Boreal proportion", ylab = "Herbivore biomass", type ="b", ylim = c(0, max(Hstars[,c("Ha","Hv")])))
> 
> points(Bax, meanHv, col=2, type = "b", pch = 4)
> 
> legend("topright", legend = c("Moose", "Deer"), col = c(1, 2), lwd = 1)
> 
> dev.off()
null device 
          1 
> 
> 
> 
> proc.time()
utilisateur     système      écoulé 
     23.049       0.069      23.129 
