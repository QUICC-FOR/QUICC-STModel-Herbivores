source("fit_fonctions/anneal_ibou.R")
Clean data                     ##########################################################################dat = read.table("../data/data_BA.txt",header = TRUE, sep = ";")## Rm all disturbed plotsdat  <- dat[is.na(dat$disturbance),]# BRP = brulis partiel# CAM = coupe d'amélioration# CB = coupe par bandes# CD = coupes en damier# CDL = coupe à diamètre limité# CE = coupe partielle et épidémie légère# CHP = chablis partiel# CJ = coupe de jardinage# CP = coupe partielle# DLD = Coupe à diamètre limite avec dégagement des arbres d'avenir# DP  = Dépérissement partiel du feuillu# EL = Épidémie légère# EPC = Éclaircie précommerciale# VEP = Verglas partiel## Order plotdat  <- dat[order(dat$id_plot,dat$yr),]## Rm all NA in cover type (R,M,F)dat  <- dat[complete.cases(dat$cover_type),]## Rm all plots with no climatic data associateddat  <- dat[which(!is.na(dat$annual_pp)),]## Conserve all plots with drainage 20,30,40dat$drainage  <- as.numeric(dat$drainage)test  = numeric(nrow(dat))test[dat$drainage >= 20 & dat$drainage <= 41] = 1dat = dat[test==1,]### Get BA in hectaresdat[,7:62] <- dat[,7:62]*10000/400## Rm plots with only one measurementN  <- rowSums(table(dat$id_plot,dat$id_mes))N  <- names(N[N==1])dat  <- dat[!dat$id_plot %in% N,]########################################################################                  Classify plots                       ########################################################################### List of interests species#T_sp  <- c("boj","bop","chr","peb","peg","pet","pib","pir","prp","sal","soa")#C_sp  <- c("epn","epb","epr","mel","pig","sab", "tho", "pru") #D_sp  <- c("err","ers","fra","frn","heg","osv","til","cet")R_sp  <- c("boj","bop","chr","peb","peg","pet","pib","pir","prp","sal","soa")B_sp  <- c("epn","epb","epr",  "mel","pig","sab", "pru","tho") T_sp  <- c("err","ers","fra","frn","heg","osv","til","cet")# Subset species BA and cover type observedclass_dat  <- dat[,c(7:62,65)]class_dat$sum_tot <- rowSums(dat[,7:62],na.rm=TRUE) #class_dat$T_prop  <- rowSums(dat[which(names(dat) %in% T_sp)],na.rm=T)/class_dat$sum_tot#class_dat$C_prop  <- rowSums(dat[which(names(dat) %in% C_sp)],na.rm=T)/class_dat$sum_tot#class_dat$D_prop  <- rowSums(dat[which(names(dat) %in% D_sp)],na.rm=T)/class_dat$sum_totclass_dat$R_prop  <- rowSums(dat[which(names(dat) %in% R_sp)],na.rm=T)/class_dat$sum_totclass_dat$B_prop  <- rowSums(dat[which(names(dat) %in% B_sp)],na.rm=T)/class_dat$sum_totclass_dat$T_prop  <- rowSums(dat[which(names(dat) %in% T_sp)],na.rm=T)/class_dat$sum_tot# Subset proportion by species classclass_dat  <- class_dat[,57:61]# Class into state typesclass_fn = function(x) {   classPlot  <- NULL  if(min(complete.cases(x))==1) {  if(sum(x[1:3]) < 1/3) {classPlot="Unclass"} 	  else if(x[1] > 2/3) {classPlot="R"}  else if(x[2] > 2/3) {classPlot="B"}  else if(x[3] > 2/3) {classPlot="T"}  else {classPlot="M"}  } else {classPlot="Unclass"}return(classPlot)}class_final  <- as.vector(apply(class_dat[,3:5],1,class_fn))# Rename columnsclass_dat  <- cbind(class_dat,class_final)names(class_dat)[c(1,6)]  <- c("obs","pred")# Format factors levelsclass_dat$obs  <- as.factor(class_dat$obs) class_dat$obs  <- factor(class_dat$obs,levels=c(levels(class_dat$obs)[3],levels(class_dat$obs)[1],levels(class_dat$obs)[2],"R","Unclass"),labels=c("B","T","M","R","Unclass"))########################################################################               Reshape and export data                 ############################################################################ Function to match remeasurements on the same line prwise  <- function(x,clim=FALSE){#
  if (clim == FALSE){    if (class(x)=='numeric') df  <-  data.frame(col1=numeric(length(x)-1),col2=numeric(length(x)-1))    if (class(x)=='character') df  <-  data.frame(col1=character(length(x)-1),col2=character(length(x)-1),stringsAsFactors=FALSE)    colnames(df)  <- c("t0","t1")    for(i in 1:dim(df)[1]){      df[i,1]  <-  x[i]      df[i,2]  <- x[i+1]    }  }#
  if (clim == TRUE){    df  <- numeric(length(x)-1)    for(i in 2:length(x)){      df[i-1]  <-  mean(c(x[i-1],x[i]))    }  }  return(df)}# Subset only columns needed and remove unclass plotsres_dat  <- cbind(dat[,c(2:4,68:71)],pred_class=class_dat$pred)res_dat$pred_class  <- as.character(res_dat$pred_class,stringsAsFactors=FALSE)## Split by id_plotres_dat  <- split(res_dat,res_dat$id_plot)## Pairpair <- function(x) { res  <- cbind(id_plot=x[-1,1],                                av_annual_pp=prwise(x[,4],clim=TRUE),                                av_annual_mean_tp=prwise(x[,5],clim=TRUE),                                av_annual_min_tp=prwise(x[,6],clim=TRUE),                                av_annual_max_tp=prwise(x[,7],clim=TRUE),                                int=diff(x[,2]),                                prwise(x[,8],clim=FALSE))                      return(res)                     }## Transpose states and compute meanreshape_dat <- lapply(res_dat,pair)## Final reshaping and exportreshape_dat  <- do.call(rbind,reshape_dat)reshape_dat  <- data.frame(reshape_dat,row.names=NULL)table(reshape_dat$t0)reshape_dat = reshape_dat[reshape_dat$t0 != "Unclass" & reshape_dat$t1 != "Unclass",]# ---------------- herbivoreslibrary(foreign)coords = read.csv("../data/plot_coords.csv")head(coords)coords$lat[which(coords$lat==0.0)]=NAcoords = na.omit(coords)head(reshape_dat)library(sp)pts = SpatialPointsDataFrame(coords[,2:3], coords, proj4string=CRS("+proj=longlat +datum=WGS84"))plot(pts, pch = ".")# ------------------- writewrite.table(reshape_dat,file="../data/data_categorical_RBTM.txt")
library(nnet)# Load datadata = as.data.frame(read.table("../data/data_categorical_RBTM.txt"))data$E = data$av_annual_mean_tpdata$P = data$av_annual_pp# Run the model#SDM = multinom(t1 ~ E + I(E^2) + I(E^3) + P + I(P^2) + I(P^3), data)library(randomForest)set.seed(23)SDM = randomForest(t1 ~ . , data = data[, c("t1", "E", "P")])
SDM
names(SDM)
importance(SDM)
SDM$localInportance
SDM$localImportance
?randomForest
SDM = randomForest(t1 ~ . , data = data[, c("t1", "E", "P")], ntree = 1000)
SDM
Clean data                     ##########################################################################dat = read.table("../data/data_BA.txt",header = TRUE, sep = ";")## Rm all disturbed plotsdat  <- dat[is.na(dat$disturbance),]# BRP = brulis partiel# CAM = coupe d'amélioration# CB = coupe par bandes# CD = coupes en damier# CDL = coupe à diamètre limité# CE = coupe partielle et épidémie légère# CHP = chablis partiel# CJ = coupe de jardinage# CP = coupe partielle# DLD = Coupe à diamètre limite avec dégagement des arbres d'avenir# DP  = Dépérissement partiel du feuillu# EL = Épidémie légère# EPC = Éclaircie précommerciale# VEP = Verglas partiel## Order plotdat  <- dat[order(dat$id_plot,dat$yr),]## Rm all NA in cover type (R,M,F)dat  <- dat[complete.cases(dat$cover_type),]## Rm all plots with no climatic data associateddat  <- dat[which(!is.na(dat$annual_pp)),]## Conserve all plots with drainage 20,30,40dat$drainage  <- as.numeric(dat$drainage)test  = numeric(nrow(dat))test[dat$drainage >= 20 & dat$drainage <= 41] = 1dat = dat[test==1,]### Get BA in hectaresdat[,7:62] <- dat[,7:62]*10000/400## Rm plots with only one measurementN  <- rowSums(table(dat$id_plot,dat$id_mes))N  <- names(N[N==1])dat  <- dat[!dat$id_plot %in% N,]########################################################################                  Classify plots                       ########################################################################### List of interests species#T_sp  <- c("boj","bop","chr","peb","peg","pet","pib","pir","prp","sal","soa")#C_sp  <- c("epn","epb","epr","mel","pig","sab", "tho", "pru") #D_sp  <- c("err","ers","fra","frn","heg","osv","til","cet")R_sp  <- c("boj","bop","chr","peb","peg","pet","pib","pir","prp","sal","soa")B_sp  <- c("epn","epb","epr",  "mel","pig","sab") T_sp  <- c("err","ers","fra","frn","heg","osv","til","cet", "pru","tho")# Subset species BA and cover type observedclass_dat  <- dat[,c(7:62,65)]class_dat$sum_tot <- rowSums(dat[,7:62],na.rm=TRUE) #class_dat$T_prop  <- rowSums(dat[which(names(dat) %in% T_sp)],na.rm=T)/class_dat$sum_tot#class_dat$C_prop  <- rowSums(dat[which(names(dat) %in% C_sp)],na.rm=T)/class_dat$sum_tot#class_dat$D_prop  <- rowSums(dat[which(names(dat) %in% D_sp)],na.rm=T)/class_dat$sum_totclass_dat$R_prop  <- rowSums(dat[which(names(dat) %in% R_sp)],na.rm=T)/class_dat$sum_totclass_dat$B_prop  <- rowSums(dat[which(names(dat) %in% B_sp)],na.rm=T)/class_dat$sum_totclass_dat$T_prop  <- rowSums(dat[which(names(dat) %in% T_sp)],na.rm=T)/class_dat$sum_tot# Subset proportion by species classclass_dat  <- class_dat[,57:61]# Class into state typesclass_fn = function(x) {   classPlot  <- NULL  if(min(complete.cases(x))==1) {  if(sum(x[1:3]) < 1/3) {classPlot="Unclass"} 	  else if(x[1] > 2/3) {classPlot="R"}  else if(x[2] > 2/3) {classPlot="B"}  else if(x[3] > 2/3) {classPlot="T"}  else {classPlot="M"}  } else {classPlot="Unclass"}return(classPlot)}class_final  <- as.vector(apply(class_dat[,3:5],1,class_fn))# Rename columnsclass_dat  <- cbind(class_dat,class_final)names(class_dat)[c(1,6)]  <- c("obs","pred")# Format factors levelsclass_dat$obs  <- as.factor(class_dat$obs) class_dat$obs  <- factor(class_dat$obs,levels=c(levels(class_dat$obs)[3],levels(class_dat$obs)[1],levels(class_dat$obs)[2],"R","Unclass"),labels=c("B","T","M","R","Unclass"))########################################################################               Reshape and export data                 ############################################################################ Function to match remeasurements on the same line prwise  <- function(x,clim=FALSE){#
  if (clim == FALSE){    if (class(x)=='numeric') df  <-  data.frame(col1=numeric(length(x)-1),col2=numeric(length(x)-1))    if (class(x)=='character') df  <-  data.frame(col1=character(length(x)-1),col2=character(length(x)-1),stringsAsFactors=FALSE)    colnames(df)  <- c("t0","t1")    for(i in 1:dim(df)[1]){      df[i,1]  <-  x[i]      df[i,2]  <- x[i+1]    }  }#
  if (clim == TRUE){    df  <- numeric(length(x)-1)    for(i in 2:length(x)){      df[i-1]  <-  mean(c(x[i-1],x[i]))    }  }  return(df)}# Subset only columns needed and remove unclass plotsres_dat  <- cbind(dat[,c(2:4,68:71)],pred_class=class_dat$pred)res_dat$pred_class  <- as.character(res_dat$pred_class,stringsAsFactors=FALSE)## Split by id_plotres_dat  <- split(res_dat,res_dat$id_plot)## Pairpair <- function(x) { res  <- cbind(id_plot=x[-1,1],                                av_annual_pp=prwise(x[,4],clim=TRUE),                                av_annual_mean_tp=prwise(x[,5],clim=TRUE),                                av_annual_min_tp=prwise(x[,6],clim=TRUE),                                av_annual_max_tp=prwise(x[,7],clim=TRUE),                                int=diff(x[,2]),                                prwise(x[,8],clim=FALSE))                      return(res)                     }## Transpose states and compute meanreshape_dat <- lapply(res_dat,pair)## Final reshaping and exportreshape_dat  <- do.call(rbind,reshape_dat)reshape_dat  <- data.frame(reshape_dat,row.names=NULL)table(reshape_dat$t0)reshape_dat = reshape_dat[reshape_dat$t0 != "Unclass" & reshape_dat$t1 != "Unclass",]# ---------------- herbivoreslibrary(foreign)coords = read.csv("../data/plot_coords.csv")head(coords)coords$lat[which(coords$lat==0.0)]=NAcoords = na.omit(coords)head(reshape_dat)library(sp)pts = SpatialPointsDataFrame(coords[,2:3], coords, proj4string=CRS("+proj=longlat +datum=WGS84"))plot(pts, pch = ".")# ------------------- writewrite.table(reshape_dat,file="../data/data_categorical_RBTM.txt")
library(nnet)# Load datadata = as.data.frame(read.table("../data/data_categorical_RBTM.txt"))data$E = data$av_annual_mean_tpdata$P = data$av_annual_pp# Run the model#SDM = multinom(t1 ~ E + I(E^2) + I(E^3) + P + I(P^2) + I(P^3), data)library(randomForest)set.seed(23)SDM = randomForest(t1 ~ . , data = data[, c("t1", "E", "P")], ntree = 1000)
SDM
?stree
?cforest
??cforest
library(cforest)
library(party)
install.packages("party")
library(party)
?cforest
SDM = cforest(t1 ~ . , data = data[, c("t1", "E", "P")])
warnings()
SDM = randomForest(t1 ~ E + P , data = data[, c("t1", "E", "P")], ntree = 1000)
SDM
SDM = cforest(t1 ~ . E + P, data = data[, c("t1", "E", "P")])
set.seed(23)
SDM = cforest(t1 ~  E + P, data = data[, c("t1", "E", "P")])
warnings()
?cforest
SDM = cforest(t1 ~  E + P, data = data[, c("t1", "E", "P")], mtry=2)
set.seed(23)
SDM = cforest(t1 ~  E + P, data = data[, c("t1", "E", "P")], control = cforest_unbiased(mtry = 2))
SDM
?cforest
pred = predict(SDM, OOB = TRUE)
set.seed(23)pred = predict(SDM, OOB = TRUE)table(SDM$t1, pred)
str(data)
table(data$t1, pred)
plot(SDM)
1-diag(pred)/sum(pred)
pred
table(data$t1, pred)->tt
1-diag(tt)/sum(tt)
1-sum(diag(tt))/sum(tt)
plot(SDM)
SDM1 = multinom(t1 ~ E + I(E^2) + I(E^3) + P + I(P^2) + I(P^3), data)
SDM1
anova(SDM1, test="Chisq")
SDM0 = multinom(t1 ~ 1, data[, c("t1", "E", "P")])
anova(SDM1,SDM0)
anova(SDM0,SDM1)
anova(SDM0,SDM1, tes ="Chisq")
anova(SDM0,SDM1, test ="Chisq")
SDM1
summary(SDM1)
data
head(data)
SDM1 = multinom(t1 ~ ., data[,c(2:4,7)])
SDM1 = multinom(t1 ~ ., data[,c(2:4,8)])
SDM0 = multinom(t1 ~ 1, data[,c(2:4,8)])
anova(SDM0,SDM1, test ="Chisq")
plot(SDM1)
plot(residuals(SDM1))
residuals(SDM1)
head(residuals(SDM1))
apply(residuals(SDM1), qqplot)
apply(residuals(SDM1),2,qqplot)
apply(residuals(SDM1),2, hist)
par(mfrow = c(2,2,))
par(mfrow = c(2,2))
apply(residuals(SDM1),2, hist)
apply(residuals(SDM1),2, plot)
nrow(data)
calib = sample(1:nrow(data), 2* nrow(data)/3)
calib
samp = sample(1:nrow(data), 2* nrow(data)/3)
calib = data[samp,]
valid = data[!samp,]
calib
valid
samp
valid = data[-samp,]
valid
SDM1 = multinom(t1 ~ ., calib[,c(2:4,8)])
SDM0 = multinom(t1 ~ 1, calib[,c(2:4,8)])
SDM1 = multinom(t1 ~ ., calib[,c("t1", "E", "P")])
SDM0 = multinom(t1 ~ 1, calib[,c("t1", "E", "P")])
anova(SDM0,SDM1, test ="Chisq")
head(residuals(SDM1))
pred1 = predict(SMD1, new=data.frame(E=data$E, P=data$P),"probs"))
pred1 = predict(SMD1, new=data.frame(E=valid$E, P=valid$P),"probs"))
pred1 = predict(SMD1, new=data.frame(E=valid$E, P=valid$P),"probs")
pred1 = predict(SDM1, new=data.frame(E=valid$E, P=valid$P),"probs")
pred1 = predict(SDM1, new=data.frame(E=valid$E, P=valid$P),"response")
pred1 = predict(SDM1, new=data.frame(E=valid$E, P=valid$P),"class")
pred1
source("Biomod_functions.r")
source("BoulangeatEcolLet2012_fct.r")
source("BoulangeatEcoLet2012_fct.r")
HK1 = HK(pred1, valid$t1)
HK1
HK1 = HK(pred, data$t1)
HK1
library(party)set.seed(23)SDM = cforest(t1 ~  E + P, data = calib[, c("t1", "E", "P")], control = cforest_unbiased(mtry = 2))set.seed(23)pred = predict(SDM, data=valid[, c("t1", "E", "P")], OOB = TRUE)HK2 = HK(pred, data$t1)
pred = predict(SDM, newdata=valid[, c("t1", "E", "P")], OOB = TRUE)
set.seed(23)pred = predict(SDM, newdata=valid[, c("t1", "E", "P")], OOB = TRUE)HK2 = HK(pred, data$t1)
(HK2 = HK(pred, valid$t1))
(HK1 = HK(pred1, valid$t1))
head(data)
SDM11 = multinom(t1 ~ ., calib[,c("t1", 2:5)])SDM01 = multinom(t1 ~ 1, calib[,c("t1", 2:5)])pred11 = predict(SDM1, new=valid[,c("t1", 2:5)],"class")(HK11 = HK(pred11, valid$t1))
SDM11 = multinom(t1 ~ ., calib[,c("t1", 2:5)])
calib[,c("t1", 2:5)]
calib
SDM11 = multinom(t1 ~ ., calib[,c(8, 2:5)])
SDM01 = multinom(t1 ~ 1, calib[,c(8, 2:5)])
pred11 = predict(SDM11, new=valid[,c(8, 2:5)],"class")
(HK11 = HK(pred11, valid$t1))
head(data)
SDM11 = multinom(t1 ~ ., calib[,c("t1", "t0" "E", "P")])
SDM11 = multinom(t1 ~ ., calib[,c("t1", "t0", "E", "P")])
SDM01 = multinom(t1 ~ 1, calib[,c("t1", "t0", "E", "P")])
c(8, 2:5)
pred11 = predict(SDM11, new=valid[,c("t1", "t0", "E", "P")],"class")
(HK11 = HK(pred11, valid$t1))
SDM = cforest(t1 ~  E + P, data = calib[, c("t1", "t0", "E", "P")], control = cforest_unbiased(mtry = 2))
set.seed(23)pred = predict(SDM, newdata=valid[, c("t1", "t0", "E", "P")], OOB = TRUE)(HK2 = HK(pred, valid$t1))
?poly(E,2)
SDM11 = multinom(t1 ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE), calib[,c("t1", "E", "P")])
SDM01 = multinom(t1 ~ 1, calib[,c("t1", "E", "P")])
pred11 = predict(SDM11, new=valid[,c("t1", "E", "P")],"class")
(HK11 = HK(pred11, valid$t1))
SDM11 = multinom(t1 ~ poly(E,3,raw=TRUE) * poly(P,3,raw=TRUE), calib[,c("t1", "E", "P")])
SDM01 = multinom(t1 ~ 1, calib[,c("t1", "E", "P")])
pred11 = predict(SDM11, new=valid[,c("t1", "E", "P")],"class")
(HK11 = HK(pred11, valid$t1))
SDM11 = multinom(t1 ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + E:P, calib[,c("t1", "E", "P")])
SDM01 = multinom(t1 ~ 1, calib[,c("t1", "E", "P")])
pred11 = predict(SDM11, new=valid[,c("t1", "E", "P")],"class")
(HK11 = HK(pred11, valid$t1))
SDM11 = multinom(t1 ~  (E+P)^3, calib[,c("t1", "E", "P")])
SDM01 = multinom(t1 ~ 1, calib[,c("t1", "E", "P")])
pred11 = predict(SDM11, new=valid[,c("t1", "E", "P")],"class")
(HK11 = HK(pred11, valid$t1))
SDM1 = multinom(t1 ~ ., calib[,c("t1", "E", "P")])SDM0 = multinom(t1 ~ 1, calib[,c("t1", "E", "P")])pred1 = predict(SDM1, new=data.frame(E=valid$E, P=valid$P),"class")(HK1 = HK(pred1, valid$t1)) #0.21
SDM11 = multinom(t1 ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + E:P, calib[,c("t1", "E", "P")])SDM01 = multinom(t1 ~ 1, calib[,c("t1", "E", "P")])pred11 = predict(SDM11, new=valid[,c("t1", "E", "P")],"class")(HK11 = HK(pred11, valid$t1))
SDM11
anova(SDM11)
dat = read.table("../data/data_BA.txt",header = TRUE, sep = ";")
head(dat)
Clean data                     ##########################################################################dat = read.table("../data/data_BA.txt",header = TRUE, sep = ";")## Rm all disturbed plotsdat  <- dat[is.na(dat$disturbance),]# BRP = brulis partiel# CAM = coupe d'amélioration# CB = coupe par bandes# CD = coupes en damier# CDL = coupe à diamètre limité# CE = coupe partielle et épidémie légère# CHP = chablis partiel# CJ = coupe de jardinage# CP = coupe partielle# DLD = Coupe à diamètre limite avec dégagement des arbres d'avenir# DP  = Dépérissement partiel du feuillu# EL = Épidémie légère# EPC = Éclaircie précommerciale# VEP = Verglas partiel## Order plotdat  <- dat[order(dat$id_plot,dat$yr),]## Rm all NA in cover type (R,M,F)dat  <- dat[complete.cases(dat$cover_type),]## Rm all plots with no climatic data associateddat  <- dat[which(!is.na(dat$annual_pp)),]## Conserve all plots with drainage 20,30,40dat$drainage  <- as.numeric(dat$drainage)test  = numeric(nrow(dat))test[dat$drainage >= 20 & dat$drainage <= 41] = 1dat = dat[test==1,]### Get BA in hectaresdat[,7:62] <- dat[,7:62]*10000/400## Rm plots with only one measurementN  <- rowSums(table(dat$id_plot,dat$id_mes))N  <- names(N[N==1])dat  <- dat[!dat$id_plot %in% N,]########################################################################                  Classify plots                       ########################################################################### List of interests species#T_sp  <- c("boj","bop","chr","peb","peg","pet","pib","pir","prp","sal","soa")#C_sp  <- c("epn","epb","epr","mel","pig","sab", "tho", "pru") #D_sp  <- c("err","ers","fra","frn","heg","osv","til","cet")R_sp  <- c("boj","bop","chr","peb","peg","pet","pib","pir","prp","sal","soa")B_sp  <- c("epn","epb","epr",  "mel","pig","sab") T_sp  <- c("err","ers","fra","frn","heg","osv","til","cet", "pru","tho")# Subset species BA and cover type observedclass_dat  <- dat[,c(7:62,65)]class_dat$sum_tot <- rowSums(dat[,7:62],na.rm=TRUE) #class_dat$T_prop  <- rowSums(dat[which(names(dat) %in% T_sp)],na.rm=T)/class_dat$sum_tot#class_dat$C_prop  <- rowSums(dat[which(names(dat) %in% C_sp)],na.rm=T)/class_dat$sum_tot#class_dat$D_prop  <- rowSums(dat[which(names(dat) %in% D_sp)],na.rm=T)/class_dat$sum_totclass_dat$R_prop  <- rowSums(dat[which(names(dat) %in% R_sp)],na.rm=T)/class_dat$sum_totclass_dat$B_prop  <- rowSums(dat[which(names(dat) %in% B_sp)],na.rm=T)/class_dat$sum_totclass_dat$T_prop  <- rowSums(dat[which(names(dat) %in% T_sp)],na.rm=T)/class_dat$sum_tot# Subset proportion by species classclass_dat  <- class_dat[,57:61]# Class into state typesclass_fn = function(x) {   classPlot  <- NULL  if(min(complete.cases(x))==1) {  if(sum(x[1:3]) < 1/3) {classPlot="Unclass"} 	  else if(x[1] > 2/3) {classPlot="R"}  else if(x[2] > 2/3) {classPlot="B"}  else if(x[3] > 2/3) {classPlot="T"}  else {classPlot="M"}  } else {classPlot="Unclass"}return(classPlot)}class_final  <- as.vector(apply(class_dat[,3:5],1,class_fn))# Rename columnsclass_dat  <- cbind(class_dat,class_final)names(class_dat)[c(1,6)]  <- c("obs","pred")# Format factors levelsclass_dat$obs  <- as.factor(class_dat$obs) class_dat$obs  <- factor(class_dat$obs,levels=c(levels(class_dat$obs)[3],levels(class_dat$obs)[1],levels(class_dat$obs)[2],"R","Unclass"),labels=c("B","T","M","R","Unclass"))
head(class_dat)
head(dat)
names(dat)
Function to match remeasurements on the same line prwise  <- function(x,clim=FALSE){#
  if (clim == FALSE){    if (class(x)=='numeric') df  <-  data.frame(col1=numeric(length(x)-1),col2=numeric(length(x)-1))    if (class(x)=='character') df  <-  data.frame(col1=character(length(x)-1),col2=character(length(x)-1),stringsAsFactors=FALSE)    colnames(df)  <- c("t0","t1")    for(i in 1:dim(df)[1]){      df[i,1]  <-  x[i]      df[i,2]  <- x[i+1]    }  }#
  if (clim == TRUE){    df  <- numeric(length(x)-1)    for(i in 2:length(x)){      df[i-1]  <-  mean(c(x[i-1],x[i]))    }  }  return(df)}# Subset only columns needed and remove unclass plotsres_dat  <- cbind(dat[,c(2:6,68:71)],pred_class=class_dat$pred)res_dat$pred_class  <- as.character(res_dat$pred_class,stringsAsFactors=FALSE)
head(res_dat)
write.table(res_dat,file="../data/data_allyears_RBTM.txt")
Split by id_plotres_dat  <- split(res_dat,res_dat$id_plot)## Pairpair <- function(x) { res  <- cbind(id_plot=x[-1,1],                                av_annual_pp=prwise(x[,4],clim=TRUE),                                av_annual_mean_tp=prwise(x[,5],clim=TRUE),                                av_annual_min_tp=prwise(x[,6],clim=TRUE),                                av_annual_max_tp=prwise(x[,7],clim=TRUE),                                int=diff(x[,2]),                                prwise(x[,8],clim=FALSE))                      return(res)                     }## Transpose states and compute meanreshape_dat <- lapply(res_dat,pair)## Final reshaping and exportreshape_dat  <- do.call(rbind,reshape_dat)reshape_dat  <- data.frame(reshape_dat,row.names=NULL)table(reshape_dat$t0)reshape_dat = reshape_dat[reshape_dat$t0 != "Unclass" & reshape_dat$t1 != "Unclass",]
write.table(reshape_dat,file="../data/data_reshaped_RBTM.txt")
library(nnet)# Load datadata = as.data.frame(read.table("../data/data_allyears_RBTM.txt"))data$E = data$av_annual_mean_tpdata$P = data$av_annual_pp
str(data)# cross validationsource("BoulangeatEcoLet2012_fct.r")samp = sample(1:nrow(data), 2* nrow(data)/3)calib = data[samp,]valid = data[-samp,]
SDM1 = multinom(t1 ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + E:P, calib[,c("t1", "E", "P")])
head(data)
library(nnet)# Load datadata = as.data.frame(read.table("../data/data_allyears_RBTM.txt"))data$E = data$av_annual_mean_tpdata$P = data$av_annual_ppdata$state = data$pred_classstr(data)
source("BoulangeatEcoLet2012_fct.r")samp = sample(1:nrow(data), 2* nrow(data)/3)calib = data[samp,]valid = data[-samp,]# Run the models
SDM1 = multinom(t1 ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + E:P, calib[,c("state", "E", "P")])
SDM1 = multinom(state ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + E:P, calib[,c("state", "E", "P")])
calib
head(calib)
data = data[-which(state=="Unclass"),]
library(nnet)# Load datadata = as.data.frame(read.table("../data/data_allyears_RBTM.txt"))data$E = data$av_annual_mean_tpdata$P = data$av_annual_ppdata$state = data$pred_classstr(data)data = data[-which(data$state=="Unclass"),]
str(data)
data$state = as.factor(as.character(data$state))
str(data)
cross validationsource("BoulangeatEcoLet2012_fct.r")samp = sample(1:nrow(data), 2* nrow(data)/3)calib = data[samp,]valid = data[-samp,]# Run the modelsSDM1 = multinom(state ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + E:P, calib[,c("state", "E", "P")])SDM0 = multinom(t1 ~ 1, calib[,c("class", "E", "P")])pred1 = predict(SDM1, new=data.frame(E=valid$E, P=valid$P),"class")(HK1 = HK(pred1, valid$t1)) #0.21
head(calib)
library(nnet)# Load datadata = as.data.frame(read.table("../data/data_allyears_RBTM.txt"))data$E = data$annual_mean_tpdata$P = data$annual_ppdata$state = data$pred_classdata = data[-which(data$state=="Unclass"),]data$state = as.factor(as.character(data$state))str(data)
source("BoulangeatEcoLet2012_fct.r")samp = sample(1:nrow(data), 2* nrow(data)/3)calib = data[samp,]valid = data[-samp,]# Run the modelsSDM1 = multinom(state ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + E:P, calib[,c("state", "E", "P")])SDM0 = multinom(t1 ~ 1, calib[,c("class", "E", "P")])
head(calib)
library(nnet)# Load datadata = as.data.frame(read.table("../data/data_allyears_RBTM.txt"))data$E = data$annual_mean_tempdata$P = data$annual_ppdata$state = data$pred_classdata = data[-which(data$state=="Unclass"),]data$state = as.factor(as.character(data$state))str(data)# cross validationsource("BoulangeatEcoLet2012_fct.r")samp = sample(1:nrow(data), 2* nrow(data)/3)calib = data[samp,]valid = data[-samp,]# Run the modelsSDM1 = multinom(state ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + E:P, calib[,c("state", "E", "P")])SDM0 = multinom(t1 ~ 1, calib[,c("class", "E", "P")])p
SDM0 = multinom(state ~ 1, calib[,c("class", "E", "P")])
SDM0 = multinom(state ~ 1, calib[,c("state", "E", "P")])
pred1 = predict(SDM1, new=data.frame(E=valid$E, P=valid$P),"class")
(HK1 = HK(pred1, valid$t1)) #0.21
(HK1 = HK(pred1, valid$state)) #0.21
SDM2 = multinom(state ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + lat + lon + E:P, calib[,c("t1", "E", "P")])
SDM2 = multinom(state ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + lat + lon + E:P, calib[,c("t1", "E", "P", "lat","lon")])
head(data)
SDM2 = multinom(state ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + lat + lon + E:P, calib[,c("state", "E", "P", "lat","lon")])
SDM02 = multinom(state ~ 1, calib[,c("state", "E", "P", "lat","lon")])
pred2 = predict(SDM2, new=valid[,c("state", "E", "P", "lat", "lon")],"class")
(HK2 = HK(pred2, valid$state))
source("BoulangeatEcoLet2012_fct.r")samp = sample(1:nrow(data), 2* nrow(data)/3)calib = data[samp,]valid = data[-samp,]# Run the modelsSDM1 = multinom(state ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + E:P, calib[,c("state", "E", "P")])SDM0 = multinom(state ~ 1, calib[,c("state", "E", "P")])pred1 = predict(SDM1, new=data.frame(E=valid$E, P=valid$P),"class")(HK1 = HK(pred1, valid$state)) #0.17### more variables--- testSDM2 = multinom(state ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + lat + lon + E:P, calib[,c("state", "E", "P", "lat","lon")])SDM02 = multinom(state ~ 1, calib[,c("state", "E", "P", "lat","lon")])pred2 = predict(SDM2, new=valid[,c("state", "E", "P", "lat", "lon")],"class")(HK2 = HK(pred2, valid$state))
source("BoulangeatEcoLet2012_fct.r")samp = sample(1:nrow(data), 2* nrow(data)/3)calib = data[samp,]valid = data[-samp,]# Run the modelsSDM1 = multinom(state ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + E:P, calib[,c("state", "E", "P")])SDM0 = multinom(state ~ 1, calib[,c("state", "E", "P")])pred1 = predict(SDM1, new=data.frame(E=valid$E, P=valid$P),"class")(HK1 = HK(pred1, valid$state)) #0.17### more variables--- testSDM2 = multinom(state ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + lat + lon + E:P, calib[,c("state", "E", "P", "lat","lon")])SDM02 = multinom(state ~ 1, calib[,c("state", "E", "P", "lat","lon")])pred2 = predict(SDM2, new=valid[,c("state", "E", "P", "lat", "lon")],"class")(HK2 = HK(pred2, valid$state))
SDM2
SDM2 = multinom(state ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + (lat * lon) + E:P, calib[,c("state", "E", "P", "lat","lon")])
SDM02 = multinom(state ~ 1, calib[,c("state", "E", "P", "lat","lon")])
pred2 = predict(SDM2, new=valid[,c("state", "E", "P", "lat", "lon")],"class")
(HK2 = HK(pred2, valid$state))
SDM2 = multinom(state ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) * (lat * lon) + E:P, calib[,c("state", "E", "P", "lat","lon")])
SDM02 = multinom(state ~ 1, calib[,c("state", "E", "P", "lat","lon")])
pred2 = predict(SDM2, new=valid[,c("state", "E", "P", "lat", "lon")],"class")
(HK2 = HK(pred2, valid$state))
SDM2
library(nnet)# Load datadata = as.data.frame(read.table("../data/data_allyears_RBTM.txt"))data$E = data$annual_mean_tempdata$P = data$annual_ppdata$state = data$pred_classdata = data[-which(data$state=="Unclass"),]data$state = as.factor(as.character(data$state))str(data)# cross validationsource("BoulangeatEcoLet2012_fct.r")samp = sample(1:nrow(data), 2* nrow(data)/3)calib = data[samp,]valid = data[-samp,]# Run the modelsSDM1 = multinom(state ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + E:P, calib[,c("state", "E", "P")])SDM0 = multinom(state ~ 1, calib[,c("state", "E", "P")])pred1 = predict(SDM1, new=data.frame(E=valid$E, P=valid$P),"class")(HK1 = HK(pred1, valid$state)) #0.17
library(nnet)# Load datadata = as.data.frame(read.table("../data/data_allyears_RBTM.txt"))data$E = data$annual_mean_tempdata$P = data$annual_ppdata$state = data$pred_classdata = data[-which(data$state=="Unclass"),]data$state = as.factor(as.character(data$state))str(data)# cross validationsource("BoulangeatEcoLet2012_fct.r")samp = sample(1:nrow(data), 2* nrow(data)/3)calib = data[,]valid = data[,]# Run the modelsSDM1 = multinom(state ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + E:P, calib[,c("state", "E", "P")])SDM0 = multinom(state ~ 1, calib[,c("state", "E", "P")])pred1 = predict(SDM1, new=data.frame(E=valid$E, P=valid$P),"class")(HK1 = HK(pred1, valid$state)) #0.17
SDM2 = multinom(state ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + (lat * lon) + E:P, calib[,c("state", "E", "P", "lat","lon")])SDM02 = multinom(state ~ 1, calib[,c("state", "E", "P", "lat","lon")])pred2 = predict(SDM2, new=valid[,c("state", "E", "P", "lat", "lon")],"class")(HK2 = HK(pred2, valid$state))
SDM1 = multinom(state ~ poly(E,3,raw=TRUE) * poly(P,3,raw=TRUE) , calib[,c("state", "E", "P")])
SDM0 = multinom(state ~ 1, calib[,c("state", "E", "P")])
pred1 = predict(SDM1, new=data.frame(E=valid$E, P=valid$P),"class")
(HK1 = HK(pred1, valid$state)) #0.17
hea(data)
head(data)
SDM1 = multinom(state ~ (poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + E:P)|id_plot, calib)
SDM1 = multinom(state ~ poly(E,3,raw=TRUE)|id_plot + poly(P,3,raw=TRUE)|id_plot + E:P, data = calib)
SDM1 = multinom(state ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + E:P + id_plot, data = calib)
SDM0 = multinom(state ~ 1, calib[,c("state", "E", "P")])
pred1 = predict(SDM1, new=data.frame(E=valid$E, P=valid$P),"class")
pred1 = predict(SDM1, new=valid,"class")
(HK1 = HK(pred1, valid$state)) #0.17
SDM1
SDM1 = multinom(state ~ poly(E,2,raw=TRUE) + poly(P,2,raw=TRUE) + E:P , data = calib)
SDM0 = multinom(state ~ 1, calib[,c("state", "E", "P")])
pred1 = predict(SDM1, new=valid,"class")
(HK1 = HK(pred1, valid$state)) #0.17
SDM1
SDM1 = multinom(state ~ . , data = calib)
SDM0 = multinom(state ~ 1, calib[,c("state", "E", "P")])
pred1 = predict(SDM1, new=valid,"class")
(HK1 = HK(pred1, valid$state)) #0.17
?multinom
m_formula = poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + E:P
m_formula = formula(poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + E:P)
?formula
SDM = randomForest(state ~ E+P , data = data[, c("state", "E", "P")], ntree = 1000)
set.seed(23)pred_real = predict(SDM,new=data.frame(E=data$E, P=data$P),"response")
(HKr = HK(pred_real, valid$state)) #0.17
pred_real
library(nnet)SDM1 = multinom(state ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + E:P , data = calib)SDM0 = multinom(state ~ 1, calib[,c("state", "E", "P")])pred1 = predict(SDM1, new=valid,"class")(HK1 = HK(pred1, valid$state)) #0.17
library(randomForest)set.seed(23)SDM = randomForest(state ~ E+P , data = data[, c("state", "E", "P")], ntree = 1000)set.seed(23)pred_real = predict(SDM,new=data.frame(E=data$E, P=data$P),"response")(HKr = HK(pred_real, valid$state)) #0.94
pred_real
samp = sample(1:nrow(data), 2* nrow(data)/3)calib = data[sampl,]valid = data[-sampl,]# Run the modelslibrary(nnet)SDM1 = multinom(state ~ poly(E,3,raw=TRUE) + poly(P,3,raw=TRUE) + E:P , data = calib)SDM0 = multinom(state ~ 1, calib[,c("state", "E", "P")])pred1 = predict(SDM1, new=valid,"class")(HK1 = HK(pred1, valid$state)) #0.17#
library(randomForest)set.seed(23)SDM = randomForest(state ~ E+P , data = data[, c("state", "E", "P")], ntree = 1000)set.seed(23)pred_real = predict(SDM,new=data.frame(E=data$E, P=data$P),"response")(HKr = HK(pred_real, valid$state)) #0.94
library(randomForest)set.seed(23)SDM = randomForest(state ~ . , data = data[, c("state", "E", "P")], ntree = 1000)set.seed(23)pred_real = predict(SDM,new=data.frame(E=data$E, P=data$P),"response")(HKr = HK(pred_real, valid$state)) #0.94
?randomForest
SDM = randomForest(data[, c("E", "P")], data$state, ntree = 1000)
SDM
set.seed(23)pred_real = predict(SDM,new=data.frame(E=data$E, P=data$P),"response")(HKr = HK(pred_real, valid$state)) #0.94
pred_real = predict(SDM,new=data.frame(E=data$E, P=data$P),"response", OOB=TRUE)
library(randomForest)set.seed(23)SDM = randomForest(state ~ . , data = data[, c("state", "E", "P")], ntree = 1000)#SDM = randomForest(data[, c("E", "P")], data$state, ntree = 1000)set.seed(23)pred_real = predict(SDM,new=data.frame(E=data$E, P=data$P),"response", OOB=TRUE)(HKr = HK(pred_real, valid$state)) #0.94
